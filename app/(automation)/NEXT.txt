import React, { useState, useEffect } from 'react';
import { SafeAreaView } from 'react-native-safe-area-context';
import { ScrollView, Text, View, Alert } from 'react-native';
import { Picker } from '@react-native-picker/picker';
import { getAllDevices, postAutomatizacion } from '../../lib/appwrite';
import { CustomButton, FormField } from '../../components';
import { useGlobalContext } from '../../context/GlobalProvider';
import { router } from 'expo-router';

// Helper function to validate time format HH:MM
const isValidTime = (time) => {
  const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/; // Regex to match HH:MM format
  return timeRegex.test(time);
};

const CreateAutomation = () => {
  const { user } = useGlobalContext();
  const [uploading, setUploading] = useState(false);
  const [devices, setDevices] = useState([]);
  const [selectedDeviceId, setSelectedDeviceId] = useState(null);
  const [selectedSwitchIndex, setSelectedSwitchIndex] = useState(null);
  const [step, setStep] = useState(1); // Controla el paso actual del formulario

  const [form, setForm] = useState({
    titulo: 'FASTEST',
    descripcion: 'FASTEST',
    minutosPrendido: '15',
    minutosApagado: '45',
  });

  useEffect(() => {
    // Fetch devices with their switches
    const fetchDevices = async () => {
      try {
        const fetchedDevices = await getAllDevices();
        const parsedDevices = fetchedDevices.map((device) => {
          try {
            const status = JSON.parse(device.status);
            return {
              ...device,
              macAddress: status.device.mac_address,
              switches: status.switches || [],
            };
          } catch (error) {
            console.warn(`Error parsing status for device ${device.$id}:`, error);
            return {
              ...device,
              macAddress: 'Unknown',
              switches: [],
              error: 'Status malformed',
            };
          }
        });
        setDevices(parsedDevices);
      } catch (error) {
        console.error('Error fetching devices:', error);
      }
    };

    fetchDevices();
  }, []);

  const selectedDevice = devices.find((device) => device.$id === selectedDeviceId);
  const selectedSwitch = selectedDevice?.switches?.[selectedSwitchIndex];

  const handleDeviceChange = (deviceId) => {
    setSelectedDeviceId(deviceId);
    setSelectedSwitchIndex(null); // Reset selected switch when changing device
  };

  const handleSwitchChange = (switchIndex) => {
    setSelectedSwitchIndex(switchIndex);
  };

  const configureSwitch = async () => {
    if (!selectedDevice || selectedSwitchIndex === null) {
      setUploading(false);
      return Alert.alert('Error', 'Please select a device and a switch.');
    }

    try {
      setUploading(true);
      const ipAddress = selectedDevice.ip;
      const scheduleMatrix = createScheduleMatrix(form.horaEncendido, form.horaApagado);

      const configData = {
        tipo: 'intervalo',
        matriz: scheduleMatrix,
      };

      const url = `http://${ipAddress}/setConfig?index=${selectedSwitchIndex}&tipo=${configData.tipo}&matriz=${encodeURIComponent(configData.matriz)}`;

      const xhttp = new XMLHttpRequest();
      xhttp.open('GET', url, true);
      xhttp.timeout = 10000; // 10 segundos de timeout

      xhttp.onreadystatechange = () => {
        if (xhttp.readyState === 4) {
          setUploading(false);
          if (xhttp.status === 200) {
            Alert.alert('Success', 'Switch configuration updated on device');
          } else {
            Alert.alert('Error', 'Failed to update switch on device.');
          }
        }
      };

      xhttp.send();
    } catch (error) {
      setUploading(false);
      Alert.alert('Error', 'Failed to update switch on device.');
    }
  };

  const createScheduleMatrix = (horaEncendido, horaApagado) => {
    let schedule = Array(288).fill('0');
    const [startHour, startMinute] = horaEncendido.split(':').map(Number);
    const [endHour, endMinute] = horaApagado.split(':').map(Number);

    const startIndex = startHour * 12 + Math.floor(startMinute / 5);
    const endIndex = endHour * 12 + Math.floor(endMinute / 5) - 1;

    if (startIndex <= endIndex) {
      schedule.fill('1', startIndex, endIndex + 1);
    } else {
      schedule.fill('1', startIndex, 288);
      schedule.fill('1', 0, endIndex + 1);
    }

    return schedule.join('');
  };

  const handleNextStep = () => {
    if (step === 1 && (!form.minutosPrendido || !form.minutosApagado)) {
      return Alert.alert('Error', 'Please provide both on and off time.');
    }
    if (step === 2 && (!selectedDevice || selectedSwitchIndex === null)) {
      return Alert.alert('Error', 'Please select a device and a switch.');
    }
    setStep(step + 1);
  };

  const handlePreviousStep = () => {
    if (step > 1) setStep(step - 1);
  };

  const submit = async () => {
    const { titulo, descripcion, minutosPrendido, minutosApagado } = form;

    if (!titulo || !descripcion || !minutosPrendido || !minutosApagado) {
      return Alert.alert('Please provide all fields: title, description, turn-on time, and turn-off time');
    }

    setUploading(true);
    try {
      await postAutomatizacion({
        titulo,
        descripcion,
        device: selectedDevice.macAddress,
        switch: selectedSwitchIndex,
        config: {
          tipo: 'intervalo',
          minutosPrendido: minutosPrendido,
          minutosApagado: minutosApagado,
        },
        userId: user.$id,
      });

      Alert.alert('Success', 'Automatization created successfully');
      router.push('/automatizaciones');
    } catch (error) {
      Alert.alert('Error', error.message);
    } finally {
      setUploading(false);
    }
  };

  const totalTimeInterval = parseInt(form.minutosPrendido) + parseInt(form.minutosApagado);

  return (
    <SafeAreaView className="px-4 pt-6 bg-primary h-full">
      <ScrollView>
        <Text className="text-2xl text-white font-semibold">Create Automatization</Text>

        {step === 1 && (
          <>
            <FormField
              title="Minutos Prendido"
              value={form.minutosPrendido}
              placeholder="Enter minutes on..."
              handleChangeText={(e) => setForm({ ...form, minutosPrendido: e })}
              otherStyles="mt-5"
            />
            <FormField
              title="Minutos Apagado"
              value={form.minutosApagado}
              placeholder="Enter minutes off..."
              handleChangeText={(e) => setForm({ ...form, minutosApagado: e })}
              otherStyles="mt-5"
            />
          </>
        )}

        {step === 2 && (
          <>
            <Text className="text-lg text-white font-semibold mt-5">Select Device</Text>
            <Picker
              selectedValue={selectedDeviceId}
              onValueChange={handleDeviceChange}
              style={{ color: 'white', fontSize: 12 }}
              itemStyle={{ color: 'white', fontSize: 12 }}
            >
              <Picker.Item label="Select a device" value={null} style={{ color: 'white' }} />
              {devices.map((device) => (
                <Picker.Item
                  key={device.$id}
                  label={`${device.name || 'Unknown'} (${device.model}: ${device.macAddress})`}
                  value={device.$id}
                  style={{ color: 'white' }}
                />
              ))}
            </Picker>

            {selectedDevice && selectedDevice.switches && !selectedDevice.error && (
              <>
                <Text className="text-lg text-white font-semibold mt-5">Select Switch</Text>
                <Picker
                  selectedValue={selectedSwitchIndex}
                  onValueChange={handleSwitchChange}
                  style={{ color: 'white', fontSize: 12 }}
                  itemStyle={{ color: 'white', fontSize: 12 }}
                >
                  <Picker.Item label="Select a switch" value={null} style={{ color: 'white' }} />
                  {selectedDevice.switches.map((sw, idx) => (
                    <Picker.Item
                      key={idx}
                      label={`${sw.nombre} (${idx + 1})`}
                      value={idx}
                      style={{ color: 'white' }}
                    />
                  ))}
                </Picker>
              </>
            )}
          </>
        )}

        {step === 3 && (
          <>
            <FormField
              title="Title"
              value={form.titulo}
              placeholder="Enter title..."
              handleChangeText={(e) => setForm({ ...form, titulo: e })}
              otherStyles="mt-5"
            />
            <FormField
              title="Description"
              value={form.descripcion}
              placeholder="Enter description..."
              handleChangeText={(e) => setForm({ ...form, descripcion: e })}
              otherStyles="mt-5"
            />
          </>
        )}

        <View className="mt-5">
          <Text className="text-lg text-white font-semibold">
            Tiempo intervalo total: {Math.floor(totalTimeInterval / 60)} horas y {totalTimeInterval % 60} minutos
          </Text>
        </View>

        <View className="flex-row justify-between mt-5">
          {step > 1 && <CustomButton title="Previous" handlePress={handlePreviousStep} />}
          {step < 3 && <CustomButton title="Next" handlePress={handleNextStep} />}
          {step === 3 && <CustomButton title="Submit" handlePress={submit} isLoading={uploading} />}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

export default CreateAutomation;
